% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse_llm_result.R
\name{parse_llm_result}
\alias{parse_llm_result}
\title{Parse LLM API Response}
\usage{
parse_llm_result(llm_response, narrative_id = NULL, metadata = NULL)
}
\arguments{
\item{llm_response}{A list containing the raw response from \code{call_llm()}.
Expected to have structure with choices, usage, model, etc.}

\item{narrative_id}{Optional character string. An identifier for the narrative
being analyzed. Used for tracking and database storage.}

\item{metadata}{Optional list. Additional metadata to include in the parsed
result (e.g., batch_id, user_id, processing_date).}
}
\value{
A single-row tibble with standardized structure containing:
\describe{
\item{detected}{Logical. TRUE if IPV detected, FALSE if not, NA if parsing failed}
\item{confidence}{Numeric. Confidence score 0.0-1.0, NA if not available}
\item{indicators}{List. Array of indicator tokens from the vocabulary}
\item{rationale}{Character. Concise justification for the detection}
\item{reasoning}{Character. Model's reasoning/thinking process if available}
\item{model}{Character. The model used for generation}
\item{created_at}{Character. ISO timestamp from the response}
\item{response_id}{Character. Unique identifier for this completion}
\item{tokens_used}{Integer. Total tokens consumed}
\item{prompt_tokens}{Integer. Tokens in the prompt}
\item{completion_tokens}{Integer. Tokens in the completion}
\item{narrative_id}{Character. User-provided narrative identifier}
\item{narrative_length}{Integer. Length of input narrative if available}
\item{parse_error}{Logical. TRUE if JSON parsing failed}
\item{error_message}{Character. Error details if any}
\item{raw_response}{Character. Original response content for debugging}
\item{metadata}{List. Additional user-provided metadata}
}
}
\description{
Extracts structured data from the raw response returned by \code{call_llm()}.
Handles various response formats including malformed JSON, special tokens,
and error responses. Returns a standardized list structure suitable for
database storage and analysis.
}
\examples{
\dontrun{
# Parse a successful response
response <- call_llm("Analyze this text", "System prompt")
parsed <- parse_llm_result(response)

# With narrative ID and metadata
parsed <- parse_llm_result(
  response,
  narrative_id = "case_123",
  metadata = list(batch = "2025-01", source = "NVDRS")
)

# Check for errors
if (parsed$parse_error) {
  warning(paste("Parse failed:", parsed$error_message))
}
}

}
\seealso{
\code{\link{call_llm}} for making API calls
}
